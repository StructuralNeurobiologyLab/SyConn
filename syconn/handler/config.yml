# General properties of the data set
scaling: [1, 1, 1]

# File system, 'FS' is currently the only supported option
backend: "FS"

# OpenGL platform: 'egl' (GPU support) or 'osmesa' (CPU rendering)
pyopengl_platform: 'egl'

version: 0.2

existing_cell_organelles: ['mi', 'sj', 'vc']
syntype_avail:

# Compute backend: 'QSUB', 'SLURM', None
batch_proc_system: 'SLURM'  # If None, fall-back is single node multiprocessing

# the here defined parameters
batch_pe: 'default'
batch_queue: 'all.q'

# TODO: Use computing settings everywhere
mem_per_node: 249500  # in MB
ncores_per_node: 20
ngpus_per_node: 2
nnodes_total: 17

# --------- LOGGING
# 'None' disables logging of SyConn modules (e.g. proc, handler, ...) to files.
# Logs of executed scripts (syconn/scripts) will be stored at the
# working directory + '/logs/' nonetheless.
default_log_dir:
log_level: 10  # INFO: 20, DEBUG: 10
# file logging for individual modules, and per job. Only use in case of
# debugging with single core processing. Logs for scripts are located in 'SyConn/scripts/'
# will be stored at wd + '/logs/'.
disable_file_logging: True

# File locking - deprecated.
disable_locking: False

# Data paths
paths:
  kd_seg:
  kd_sym:
  kd_asym:
  kd_sj:
  kd_vc:
  kd_mi:
  init_rag:
  use_new_subfold:

# (Super-)SegmentationDataset versions
versions:
  sv: 0   # these are the cell supervoxels
  vc: 0
  sj: 0
  syn: 0
  syn_ssv: 0
  mi: 0
  ssv: 0
  ax_gt: 0
  cs: 0

# Cell object properties
cell_objects:
  # size threshold applied during object extraction
  min_obj_vx:
    mi: 500
    sj: 100
    vc: 100
    sv: 1  # all cell supervoxels are extracted
    cs: 10  # contact sites tend to be small
    syn: 10  # these are overlayed with contact sites and therefore tend to be small
    syn_ssv: 100 # minimum number of voxel for synapses in SSVs

  lower_mapping_ratios:
    mi: 0.5
    sj: 0.1
    vc: 0.5

  upper_mapping_ratios:
    mi: 1.
    sj: 0.9
    vc: 1.

  # size threshold (in voxels) applied when mapping them to cells
  sizethresholds:
    mi: 2786
    sj: 498
    vc: 1584

  probathresholds:
    mi: 0.428571429
    sj: 0.19047619
    vc: 0.285714286

  # if object segmentation is generated from probability map or a binary mask and extract_morph_op (see below) contains
  # binary_erosion, then the segmentation is computed via watershed. The seeds are computed via connected compontents
  # on the eroded binary mask (as many erosion as defined in extract_morph_op).
  # The thresholds below will also delete objects bigger than min_seed_vx as it is performed on segmentation seeds.
  min_seed_vx:
    mi: 50
    sj: 10
    vc: 10

  # Hook for morphological operations from scipy.ndimage applied during object extraction.
  # e.g. {'sj': ['binary_closing', 'binary_opening'], 'mi': [], 'sv': []}
  # if erosion is applied last, use watershed to form segmentation on original mask data, seeds are generated
  # from the eroded mask via ndimage.label
  extract_morph_op:
    # remove small fragments, close existing holes, then erode to trigger watershed segmentation
    # all morphology operations will take the voxel size into account by using an X times dilated structure
    # in the xy plane (where X is the ratio of Z/X) as kernel in the morphology operations.
    mi: ['binary_opening', 'binary_closing', 'binary_erosion', 'binary_erosion', 'binary_erosion', 'binary_erosion']
    sj: ['binary_opening', 'binary_closing', 'binary_erosion']
    vc: ['binary_opening', 'binary_closing', 'binary_erosion']

  # bounding box criteria for mapping mitochondria objects
  thresh_mi_bbd_mapping: 25000  # bounding box diagonal in NM

  # --------- CONTACT SITE AND SYNAPSE PARAMETERS
  # used for agglomerating 'syn' objects (cell supervoxel-based synapse fragments)
  # into 'syn_ssv'
  cs_gap_nm: 250
  cs_filtersize: [13, 13, 7]
  cs_nclosings: 7  # TODO: bind to cs_filtersize
  # Parameters of agglomerated synapses 'syn_ssv'
  # mapping parameters in 'map_objects_to_synssv'; assignment of cellular
  # organelles to syn_ssv
  max_vx_dist_nm: 2000  # TODO: rename to max_vert_dist_nm
  max_rep_coord_dist_nm: 4000
  # RFC probability used for classifying whether syn or not
  thresh_synssv_proba: 0.5
  # > sym_thresh will be assigned synaptic sign -1 (inhibitory) and <= will be
  # (1, excitatory)
  sym_thresh: 0.225
  # labels are None by default
  asym_label:
  sym_label:

meshes:
  allow_mesh_gen_cells:
  use_new_meshing:

  downsampling:
    sv: [4, 4, 2]
    sj: [2, 2, 1]
    vc: [4, 4, 2]
    mi: [4, 4, 2]
    cs: [2, 2, 1]
    syn_ssv: [2, 2, 1]

  mesh_min_obj_vx: 100  # adapt to size threshold

  meshing_props:
    normals: False
    simplification_factor: 500
    max_simplification_error: 40  # in nm

skeleton:
  # If True, allow cell skeleton generation from rendering locations (inaccurate).
  allow_ssv_skel_gen: True
  feature_context_rfc: # in nm
    axoness: 8000
    spiness: 1000

use_point_models: False

views:
  use_onthefly_views: True  # TODO: does not yet apply for glia
  use_new_renderings_locs:
  # ordering sensitive; 'sj' will be replaced by 'syn_ssv' if use_onthefly_views == True
  subcell_objects: ['mi', 'vc', 'sj']
  # used for default view rendering (glia separation, spine detection, cell type prediction)
  view_properties:
    comp_window: 8000  # in nm
    ws: [256, 128]  # in pixel (x, y)
    nb_views: 2

# --------- GLIA PARAMETERS
glia:
  prior_glia_removal: True
  # min. connected component size of glia nodes/SV after thresholding glia proba
  min_cc_size_ssv: 8000  # in nm; L1-norm on vertex bounding box

  # Threshold for glia classification
  glia_thresh: 0.161489
  # number of sv used during local rendering. The total number of SV used are
  # subcc_size_big_ssv + 2*(subcc_chunk_size_big_ssv-1)
  subcc_size_big_ssv: 35
  rendering_max_nb_sv: 5000
  # number of SV for which views are rendered in one pass
  subcc_chunk_size_big_ssv: 9

# --------- SPINE PARAMETERS
spines:
  min_spine_cc_size: 10
  min_edge_dist_spine_graph: 110

  # view inference
  gt_path_spineseg: '/wholebrain/scratch/areaxfs3/ssv_spgt/spgt_semseg/'
  # mapping parameters of the semantic segmentation prediction to the cell mesh
  # Note: ``k>0`` means that the predictions are propagated to unpredicted and background labels
  # via nearest neighbors.
  semseg2mesh_spines:
    semseg_key: "spiness"
    k: 0

  # mapping of vertex labels to skeleton nodes; ignore labels 4 (background)
  # and 5 (unpredicted), use labels of the k-nearest vertices
  semseg2coords_spines:
    k: 50
    ds_vertices: 1
    ignore_labels: [4, 5]  # background, unpredicted

# --------- COMPARTMENT PARAMETERS
compartments:
  dist_axoness_averaging: 10000  # also used for myelin averaging
  gt_path_axonseg: '/wholebrain/scratch/areaxfs3/ssv_semsegaxoness/all_bouton_data/'

  # `k=0` will not map predictions to unpredicted vertices -> faster
  # `k` is the parameter used in `semseg2mesh`
  view_properties_semsegax:
    verbose: False
    ws: [1024, 512]
    nb_views: 3
    comp_window: 40960  # in NM
    semseg_key: 'axoness'
    k: 0
  # mapping of vertex labels to skeleton nodes; ignore labels 5 (background)
  # and 6 (unpredicted), use labels of the k-nearest vertices
  map_properties_semsegax:
    k: 50
    ds_vertices: 1
    ignore_labels: [5, 6]  # background, unpredicted

# --------- CELLTYPES
celltypes:
  nb_views_model: 20

# --------- MORPHOLOGY EMBEDDING
tcmn:
  ndim_embedding: 10



